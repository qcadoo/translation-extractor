%% name = TranslationsExtractor::Parser::Ext

root = lines("")

lines(prefix) = (line(prefix)*):lines ~output(lines)

line(prefix) = relevant(prefix)
             | block(prefix)
             | < junk > { text }

relevant(prefix) = prefix_override
                 | data_definition(prefix)
                 | attribute(prefix)
                 | single_call(prefix)
                 | chained_call(prefix)
                 | ads_call(prefix)
                 | scope(prefix)

block(prefix) = OPEN:op lines(prefix):li CLOSE:cl { [op, li, cl] }

# e.g. Ext.define("ads.locale.en.view.project.List", { ... })
scope(prefix)       = < EXT DOT meth_of_type("scope"):ident
                      LPAREN STRING:param COMMA >
                      ~join_keys(prefix, param):new_prefix
                      block(new_prefix):lines_src
                      RPAREN:right_src
                      { [text, lines_src, right_src] }

# e.g. this.setTitle('Projects')
single_call(prefix) = < THIS DOT meth_of_type("setter"):ident
                      LPAREN > STRING:value RPAREN:right_src
                      ~translate_setter_to_key(ident):key
                      ~translate(prefix, key, value):translated_value
                      { [text, translated_value, right_src] }

# e.g. this.lookupReference('editButton').setText('Edit')
chained_call(prefix) = < THIS DOT meth_of_type("finder"):ident
                      LPAREN STRING:key RPAREN:right_src
                      DOT meth_of_type("any")
                      LPAREN > STRING:value RPAREN:right_src
                      ~translate(prefix, key, value):translated_value
                      { [text, translated_value, right_src] }

# e.g. ads.app.getController('Main').errorTitle = 'Error';
ads_call(prefix)    = < "ads" DOT "app" DOT meth_of_type("any")
                      LPAREN STRING:key1 RPAREN
                      DOT meth_of_type("any"):key2 ASSIGN > STRING:value
                      ~join_keys(key1, key2):key
                      ~translate(prefix, key, value):translated_value
                      { [text, translated_value] }

# e.g. format: 'd-m-Y'
attribute(prefix)   = < meth_of_type("attribute"):key COLON > STRING:value
                      COMMA:right_src
                      ~translate(prefix, key, value):translated_value
                      { [text, translated_value, right_src] }

# e.g. data: [ { "name" : "Succeed", "value": "succeed"} ]
data_definition(prefix) = < meth_of_type("data"):data COLON >
                          json(prefix):json
                          { [text, json] }

prefix_override     = < "override" COLON STRING:new_prefix >
                      lines(new_prefix):li
                      { [text, li] }

json(prefix)        = < json_part >
                      ~translate_json(prefix, text):translated_json
                      { translated_json }

json_part           = OPEN ((json_attr COMMA)* json_attr)? CLOSE
                    | LBRACK ((json_part COMMA)* json_part)? RBRACK
                    | STRING

json_attr           = STRING COLON json_part

meth_of_type(type) = IDENTIFIER:i &{ matches_type? i, type } { i }

junk = SEPARATOR
     | COMMA
     | JUNK_EXPR

JUNK_EXPR = </[^;,{}]+/> { nil }
SEPARATOR = </\s*\;\s*/> { nil }
OPEN      = </\s*\{\s*/> { text }
CLOSE     = </\s*\}\s*/> { text }
LPAREN    = </\s*\(\s*/> { text }
RPAREN    = </\s*\)\s*/> { text }
COMMA     = </\s*\,\s*/> { text }
COLON     = </\s*\:\s*/> { nil }
ASSIGN    = </\s*\=\s*/> { text }
LBRACK    = </\s*\[\s*/> { text }
RBRACK    = </\s*\]\s*/> { text }

STRING    = </\'([^'\\]|\\.)*\'|\"([^"\\]|\\.)*\"/> ~make_string(text)

DOT  = "."
EXT  = "Ext"
THIS = "this"

IDENTIFIER = </\w+/> { text }
